const config = require('../settings')
const { cmd, commands } = require('../lib/command')
const { getBuffer, fetchJson } = require('../lib/functions')
const { sizeFormatter } = require('human-readable')
const GDriveDl = require('../lib/gdrive.js'); // ‚úÖ CORRECT
const N_FOUND = "*I couldn't find anything :(*"
const axios = require('axios');

const replyTrackers = new Map();

function addReplyTracker(id, handler) {
    replyTrackers.set(id, handler);
}

async function handleReply(conn, mek) {
    const msgId = mek.message?.extendedTextMessage?.contextInfo?.stanzaId || mek.key?.id;
    const handler = replyTrackers.get(msgId);
    if (handler) {
        await handler(mek, mek.message?.conversation || mek.message?.extendedTextMessage?.text || '');
        replyTrackers.delete(msgId);
    }
}

cmd({
    pattern: "sub",
    alias: ["subfilm"],
    desc: "üé¨ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑É‡∑í ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏",
    category: "movie",
    filename: __filename,
}, async (conn, mek, m, { from, q, reply }) => {
    if (!q) return reply("üé¨ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∑í‡∂∫‡∂ö ‡∂±‡∂∏‡∂ö‡∑ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±! (‡∂ã‡∂Ø‡∑è: Titanic)");

    let res;
    try {
        res = await axios.get(`https://cinesubz-api-zazie.vercel.app/api/search?q=${encodeURIComponent(q)}`);
    } catch {
        return reply("‚ùå ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä. ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.");
    }

    const data = res.data?.result?.data || [];
    if (data.length === 0) return reply("üòî ‡∂ö‡∑í‡∑É‡∑í‡∂Ø‡∑î ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.");

    let msg = `üé• *"${q}" ‡∑É‡∂≥‡∑Ñ‡∑è ‡∑Ñ‡∂∏‡∑î ‡∑Ä‡∑ñ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß:\n\n`;
    data.slice(0, 10).forEach((movie, i) => {
        msg += `*${i + 1}.* ${movie.title} (${movie.year})\n`;
    });
    msg += `\nüì© *‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫‡∑ô‡∑ä ‡∂Ö‡∂Ç‡∂ö‡∂∫ Reply ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*`;

    const sent = await conn.sendMessage(from, { text: msg }, { quoted: mek });

    addReplyTracker(sent.key.id, async (mek2, msg2) => {
        const selected = parseInt(msg2.trim());
        if (isNaN(selected) || selected < 1 || selected > data.length) {
            return reply("‚ùå ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.");
        }

        const selectedMovie = data[selected - 1];
        let detail;
        try {
            // FIX: Use movie slug (last part of URL path)
            const movieSlug = selectedMovie.link.split("/").filter(Boolean).pop();
            const url = `https://cinesubz-api-zazie.vercel.app/api/movie/${movieSlug}`;
            detail = await axios.get(url);
        } catch {
            return reply("‚ùå ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä.");
        }

        const movie = detail.data.result.data;
        if (!movie.dl_links || movie.dl_links.length === 0) return reply("üòî ‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö link ‡∂±‡∑ê‡∑Ñ‡∑ê.");

        let dmsg = `üé¨ *${movie.title}*\nüìÖ *${movie.date}*\n‚≠ê *IMDB:* ${movie.imdbRate}\nüåç *‡∂ª‡∂ß:* ${movie.country}\n\n*üì• ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥:\n\n`;
        movie.dl_links.forEach((dl, i) => {
            dmsg += `*${i + 1}.* ${dl.quality} (${dl.size})\n`;
        });
        dmsg += `\nReply ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ Quality ‡∂ë‡∂ö‡∑ö ‡∂Ö‡∂Ç‡∂ö‡∂∫`;

        const sent2 = await conn.sendMessage(from, { text: dmsg }, { quoted: mek });

        addReplyTracker(sent2.key.id, async (mek3, msg3) => {
            const pick = parseInt(msg3.trim());
            if (isNaN(pick) || pick < 1 || pick > movie.dl_links.length) {
                return reply("‚ùå ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.");
            }

            const selectedLink = movie.dl_links[pick - 1];

            await conn.sendMessage(from, {
                document: { url: selectedLink.link },
                mimetype: "video/mp4",
                fileName: `${movie.title} - ${selectedLink.quality}.mp4`,
                caption: `üé¨ *${movie.title}*\nüì• ${selectedLink.quality} - ${selectedLink.size}\n\nPowered by SOLO-LEVELING`,
            }, { quoted: mek });
        });
    });
});

module.exports.handleReply = handleReply;
